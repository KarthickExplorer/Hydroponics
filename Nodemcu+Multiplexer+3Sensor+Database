#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <DHT.h>

#define DHTPIN D5       // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // Type of the DHT sensor

// Wifi Connection details
const char* ssid = "Karthick";
const char* password = "Karthick@2001";
const char* host = "192.168.1.51";

DHT dht(DHTPIN, DHTTYPE);

#define S0 D0   /* Assign Multiplexer pin S0 connect to pin D0 of NodeMCU */
#define S1 D1   /* Assign Multiplexer pin S1 connect to pin D1 of NodeMCU */
#define S2 D2   /* Assign Multiplexer pin S2 connect to pin D2 of NodeMCU */
#define S3 D3   /* Assign Multiplexer pin S3 connect to pin D3 of NodeMCU */
#define SIG A0  /* Assign SIG pin as Analog output for all 16 channels of Multiplexer to pin A0 of NodeMCU */

float Temperature;
float Humidity;
String Ph_State;
String Soil_Stages;
float calibration_value = 21.34 + 0.7;
float default_value = 10.17;
unsigned long int avgValue;  // Store the average value of the sensor feedback
int buf[10], temp;
float Ph_Sensor;
float SoilMoisture;  

void setup() {
  Serial.begin(115200); 
  dht.begin();
  pinMode(S0,OUTPUT);   /* Define digital signal pin as output to the Multiplexer pin S0 */        
  pinMode(S1,OUTPUT);   /* Define digital signal pin as output to the Multiplexer pin S1 */  
  pinMode(S2,OUTPUT);   /* Define digital signal pin as output to the Multiplexer pin S2 */ 
  pinMode(S3,OUTPUT);   /* Define digital signal pin as output to the Multiplexer pin S3 */  
  pinMode(SIG, INPUT);  /* Define analog signal pin as input or receiver from the Multiplexer pin SIG */  

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  float Humidity = dht.readHumidity();
  float Temperature = dht.readTemperature();

  // Channel 0 (C0 pin - binary output 0,0,0,0) --> Ph Sensor Reading through Multiplexer.
  digitalWrite(S0,LOW); digitalWrite(S1,LOW); digitalWrite(S2,LOW); digitalWrite(S3,LOW);
  for (int i = 0; i < 10; i++) { // Get 10 sample values from the sensor for smoothing the value
    buf[i] = analogRead(SIG);
    delay(10);
  }
  for (int i = 0; i < 9; i++) { // Sort the analog from small to large
    for (int j = i + 1; j < 10; j++) {
      if (buf[i] > buf[j]) {
        temp = buf[i];
        buf[i] = buf[j];
        buf[j] = temp;
      }
    }
  }
  avgValue = 0;
  for (int i = 2; i < 8; i++) avgValue += buf[i];  // Take the average value of 6 center samples
  float phValue = (float)avgValue * 5.0 / 1024 / 6; // Convert the analog into millivolts
  phValue = -5.70 * phValue + calibration_value;    // Convert the millivolts into pH value
  Ph_Sensor = phValue + default_value;
  
  if (Ph_Sensor <= 6.4) {
    Ph_State = "Acidic";
  } else if (Ph_Sensor >= 6.5 && Ph_Sensor <= 7.5) {
    Ph_State = "Neutral";
  } else {
    Ph_State = "Alkaline";
  }

  // Channel 1 (C1 pin - binary output 1,0,0,0) ----> Read the Soil Moisture Sensor through Multiplexer.
  digitalWrite(S0,HIGH); digitalWrite(S1,LOW); digitalWrite(S2,LOW); digitalWrite(S3,LOW);
  SoilMoisture = analogRead(SIG);
  
  if (SoilMoisture > 750) {
    Soil_Stages = "Soil is Dry! Water needed!";
  } else {
    Soil_Stages = "Soil is Moist! Water not needed!";
  } 
  
  if (isnan(Temperature) || isnan(Humidity) || isnan(SoilMoisture) || isnan(Ph_Sensor)) {
    Serial.println("Failed to read one of the sensors");
  } else {
    Serial.print("Temperature: ");
    Serial.print(Temperature);
    Serial.print(" %\t");
    Serial.print("Humidity: ");
    Serial.print(Humidity);
    Serial.print(" *C\t");
    Serial.print("SoilMoisture: ");
    Serial.print(SoilMoisture);
    Serial.print("\t");
    Serial.print("Ph_Sensor: ");
    Serial.println(Ph_Sensor);
    delay(20000);
  }

  Serial.print("connecting to ");
  Serial.println(host);

  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;
  }

  // This will send the request to the server
  client.print(String("GET http://localhost/Threesensors/ThreeSensor.php?") +
               ("&Temperature=") + Temperature + 
               ("&Humidity=") + Humidity + 
               ("&SoilMoisture=") + SoilMoisture +
               ("&Ph_Sensor=") + Ph_Sensor + 
               " HTTP/1.1\r\n" + 
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");

  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 1000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }

  // Read all the lines of the reply from server and print them to Serial
  while (client.available()) {
    String line = client.readStringUntil('\r');
    Serial.print(line);
  }

  Serial.println();
  Serial.println("closing connection");
}
